c
n
@map[message]
printed_message_last_time
n
c
n
q
pos
poa
n
pos+n+1
pos
s
n
c
pos
n
nodes.map(&:val)
nodes
n
c
q
n
nodes[pos]
n
pos
nodes.length
node.length
nodes
n
pos
n
pos
n
s
pos
nodes.map(&:val)
n
q
node.val
n
m
s
n
q
@current_pos
@arr.compact.sum
@arr
n
@arr
n
s
q
@arr
n
m
s
c
@arr
n
s
c
middle
n
negative
n
q
positive
negative
n
positive
c
q
n
q
"1011".to_i(2)
ret.join.to_i(2)
ret.join
ret
n
c
nums
ret
n
odd
even
c
ret
n
nums
even
odd
c
q
nums
even
odd
q
@map
n
@map
n
@keys
key
s
least_used_key
n
s
c
q
up
key
@keys
n
s
n
s
c
q
s
n
s
c
q
least_used_key
n
@keys
target
n
@keys
s
n
s
c
key_to_evict
n
s
c
q
least_used_key
@keys
n
@keys
c
position == [0, 0] || direction != [0, 1]
direction
position
n
q
position[0] * direction[0] <= 0 && position[1] * direction[1] <= 0
n
s
n
c
\c
q
n
c
q
[a,b].min
ret
n
height.slice(a + 1, b - a - 1)
    it { expect(trap([1, 0, 2])).to eq(1) }
b-a-1
height
print b
b
a
n
q
c
q
s
c
n
c
n
q
@board
player
n
s
c
q
extract_version(version1)
extract_version(version2)
n
c
q
extract_version(version2)
version2
major2
minor2
patch2
n
q
c
q
major1
q
s
n
c
n
is_visited
is_land
n
s
n
c
s
n
s
c
n
is_land
is_lang
matrix
_
n
s
n
c
n
q
matrix
first_column
last_row
last_column
first_row
c
q
c
q
@head.val
node.previous
node.val
@head.val
n
node
n
s
ret
n
ret
n
key
@map.keys
@map.keys.map(&:val)
s
c
q
key
node
