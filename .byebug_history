c
\c
q
n
c
q
[a,b].min
ret
n
height.slice(a + 1, b - a - 1)
    it { expect(trap([1, 0, 2])).to eq(1) }
b-a-1
height
print b
b
a
n
q
c
q
s
c
n
c
n
q
@board
player
n
s
c
q
extract_version(version1)
extract_version(version2)
n
c
q
extract_version(version2)
version2
major2
minor2
patch2
n
q
c
q
major1
q
s
n
c
n
is_visited
is_land
n
s
n
c
s
n
s
c
n
is_land
is_lang
matrix
_
n
s
n
c
n
q
matrix
first_column
last_row
last_column
first_row
c
q
c
q
@head.val
node.previous
node.val
@head.val
n
node
n
s
ret
n
ret
n
key
@map.keys
@map.keys.map(&:val)
s
c
q
key
node
n
s
n
ret
n
key
s
c
s
up
@map[2]
@map
@map[2]
map[2]
map[2
@head
key
c
s
ret
@head.next.next.next.val
@head.next.next.val
@head.next.val
@head.val
key
ret
up
q
pos2
pos1
n
ret
n
char
pos2
str
pos1
pos2
n
c
q
c
q
pos1
char_positions[char]
char
str
c
q
str.length
str
pos2
c
pos2
str
c
q
n
max_size
n
max_size
n
pos1
pos2
char
n
s
n
c
q
char_positions[char]
str
char
s
char
str
s
n
s
n
c
pos1
pos2
n
s
n
q
n
char
n
char
pos1
n
pos2
char
s
n
c
q
pos2
pos1
n
pos2
n
str
n
s
n
str
n
c
q
last_char_pos
pos1
pos2
str
pos1
n
q
n
pos2
pos1
c
q
max_size
n
s
n
q
chars_by_index
n
s
index
n
s
str
chars_by_index
c
chars_by_index
next_chars_by_index
c
q
index - first_pos + 1
str
char
n
index
first_pos
n
max_size
n
first_pos
str
s
